---
import UsersStats from "../components/UsersStats.svelte";
import ApiRequestsStats from "../components/ApiRequestsStats.svelte";
import NewsdataTodayStats from "../components/NewsdataTodayStats.svelte";
import UsersList from "../components/UsersList.svelte";
import "../styles/global.css";
---

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <title>YourNewsOnTime Admin</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@3.4.1/dist/tailwind.min.css"
      rel="stylesheet"
    />
  </head>
  <body class="min-h-screen bg-gradient-to-br from-gray-50 to-green-50">
    <header class="flex items-center gap-2 py-8 px-8">
      <div class="bg-green-500 rounded-full p-2">
        <svg
          class="w-8 h-8 text-white"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <rect x="3" y="5" width="18" height="14" rx="3" fill="currentColor"
          ></rect>
        </svg>
      </div>
      <h1 class="text-2xl font-bold text-gray-800">
        YourNewsOnTime <span class="text-green-600">Admin</span>
      </h1>
    </header>

    <main class="max-w-7xl mx-auto px-4 pb-8">
      <!-- Tarjetas de estadísticas -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <UsersStats client:load />
        <ApiRequestsStats client:load />
        <NewsdataTodayStats client:load />
      </div>

      <!-- Lista de usuarios -->
      <div class="mb-8">
        <UsersList client:load />
      </div>

      <!-- Panel de control -->
      <div class="p-8 bg-white rounded-2xl shadow">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-bold text-gray-700">
            Panel de administración
          </h2>
          <button
            id="refreshBtn"
            class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
          >
            🔄 Actualizar datos
          </button>
        </div>
        <p class="text-gray-500 mb-4">
          Dashboard con datos reales de Firebase y NewsData.io. Los indicadores
          "Live" muestran datos reales, "Demo" muestra datos de prueba cuando no
          se puede conectar.
        </p>

        <!-- Botones de acción -->
        <div class="flex gap-4 mt-6">
          <button
            id="testNewsDataBtn"
            class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
          >
            🧪 Probar NewsData.io
          </button>
          <button
            id="configFirebaseBtn"
            class="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
          >
            🔥 Configurar Firebase
          </button>
        </div>

        <!-- Resultados -->
        <div id="testResults" class="mt-4 p-4 bg-gray-50 rounded-lg hidden">
          <pre id="testOutput" class="text-sm text-gray-700"></pre>
        </div>
      </div>
    </main>

    <script>
      // Auto-refresh cada 30 segundos
      let autoRefreshInterval;

      function startAutoRefresh() {
        autoRefreshInterval = setInterval(() => {
          console.log("🔄 Auto-refreshing dashboard...");
          window.location.reload();
        }, 30000); // 30 segundos
      }

      function stopAutoRefresh() {
        if (autoRefreshInterval) {
          clearInterval(autoRefreshInterval);
        }
      }

      // Iniciar auto-refresh
      startAutoRefresh();

      // Parar auto-refresh cuando la página no está visible
      document.addEventListener("visibilitychange", () => {
        if (document.hidden) {
          stopAutoRefresh();
        } else {
          startAutoRefresh();
        }
      });

      // Botón de refresh manual
      document.getElementById("refreshBtn")?.addEventListener("click", () => {
        window.location.reload();
      });

      // Botón de prueba NewsData.io
      document
        .getElementById("testNewsDataBtn")
        ?.addEventListener("click", async () => {
          const resultsDiv = document.getElementById("testResults");
          const outputPre = document.getElementById("testOutput");

          resultsDiv.classList.remove("hidden");
          outputPre.textContent = "Probando conexión con NewsData.io...";

          try {
            const response = await fetch("/API/test-newsdata");
            const result = await response.json();

            outputPre.textContent = JSON.stringify(result, null, 2);

            if (result.success) {
              resultsDiv.className =
                "mt-4 p-4 bg-green-50 border border-green-200 rounded-lg";
            } else {
              resultsDiv.className =
                "mt-4 p-4 bg-red-50 border border-red-200 rounded-lg";
            }
          } catch (error) {
            outputPre.textContent = `Error: ${error.message}`;
            resultsDiv.className =
              "mt-4 p-4 bg-red-50 border border-red-200 rounded-lg";
          }
        });

      // Botón de configuración Firebase
      document
        .getElementById("configFirebaseBtn")
        ?.addEventListener("click", () => {
          alert("Ejecuta el comando en terminal: ./setup-firebase.sh");
        });
    </script>
  </body>
</html>
